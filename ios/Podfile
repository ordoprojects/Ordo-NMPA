require_relative '../node_modules/react-native/scripts/react_native_pods'
require_relative '../node_modules/@react-native-community/cli-platform-ios/native_modules'
require_relative '../node_modules/react-native-permissions/scripts/setup'

use_frameworks! :linkage => :static
$RNFirebaseAsStaticFramework = true

begin
  react_native_pods_script = Pod::Executable.execute_command('node', ['-p',
    'require.resolve("react-native/scripts/react_native_pods.rb", {paths: [process.argv[1]]})',
    __dir__]).strip
  require react_native_pods_script
rescue => e
  Pod::UI.puts "Error resolving react_native_pods.rb: #{e}".red
  raise e
end

platform :ios, min_ios_version_supported
prepare_react_native_project!

linkage = ENV['USE_FRAMEWORKS']
if linkage != nil
  Pod::UI.puts "Configuring Pod with #{linkage}ally linked Frameworks".green
  use_frameworks! :linkage => :static
  $RNFirebaseAsStaticFramework = true
end

target 'ORDO' do
  config = use_native_modules!

  use_react_native!(
    :path => config[:reactNativePath],
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )

  pod 'Firebase/Core', :modular_headers => true
  pod 'Firebase/Firestore', :modular_headers => true
  pod 'GoogleUtilities', :modular_headers => true
  pod 'FirebaseCoreInternal', :modular_headers => true
  pod 'RNVectorIcons', :path => '../node_modules/react-native-vector-icons'
  pod 'RNPermissions', :path => '../node_modules/react-native-permissions'

  target 'ORDOTests' do
    inherit! :complete
  end

  require_relative '../node_modules/react-native-permissions/scripts/setup'
  setup_permissions([
    'Bluetooth',
    'Calendars',
    'CalendarsWriteOnly',
    'Camera',
    'Contacts',
    'FaceID',
    'LocationAccuracy',
    'LocationAlways',
    'LocationWhenInUse',
    'MediaLibrary',
    'Microphone',
    'Motion',
    'Notifications',
    'PhotoLibrary',
    'PhotoLibraryAddOnly',
    'Reminders',
    'Siri',
    'SpeechRecognition',
    'StoreKit',
  ])

  post_install do |installer|
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false,
    )

    # âœ… Set global settings to prevent build issues
    installer.pods_project.build_configurations.each do |config|
      config.build_settings["CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES"] = true
    end

    installer.pods_project.targets.each do |target|
      target.build_configurations.each do |config|
        config.build_settings['ENABLE_BITCODE'] = 'NO' # âœ… Disable Bitcode
      end

      # Fix BoringSSL warnings
      if target.name == 'BoringSSL-GRPC'
        target.source_build_phase.files.each do |file|
          if file.settings && file.settings['COMPILER_FLAGS']
            flags = file.settings['COMPILER_FLAGS'].split
            flags.reject! { |flag| flag == '-GCC_WARN_INHIBIT_ALL_WARNINGS' }
            file.settings['COMPILER_FLAGS'] = flags.join(' ')
          end
        end
      end
    end

    # âœ… Optional Section: Bitcode Strip from all embedded frameworks
    require 'find'
    bitcode_strip_path = `xcrun --find bitcode_strip`.strip

    def strip_bitcode_from_embedded_frameworks(bitcode_strip_path)
      frameworks_path = File.join(__dir__, '..', 'ios', 'Pods')
      Find.find(frameworks_path) do |path|
        next unless path.end_with?('.framework')
        binary = File.join(path, File.basename(path, '.framework'))
        next unless File.exist?(binary)
        puts "ðŸ§¹ Stripping bitcode from #{binary}"
        system("#{bitcode_strip_path} #{binary} -r -o #{binary}")
      end
    end

    strip_bitcode_from_embedded_frameworks(bitcode_strip_path)
  end
end
